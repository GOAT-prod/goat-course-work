// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns access and refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "loginData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authservice.LoginData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/authservice.Tokens"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Invalid credentials or request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Invalidates the user's session by revoking the refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Invalid token or request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user and returns access and refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "registerData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authservice.RegisterData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/authservice.Tokens"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Invalid registration data or request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cart": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Возвращает содержимое корзины текущего пользователя.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Корзина"
                ],
                "summary": "Получить корзину пользователя",
                "responses": {
                    "200": {
                        "description": "Содержимое корзины пользователя",
                        "schema": {
                            "$ref": "#/definitions/cart.Cart"
                        }
                    },
                    "400": {
                        "description": "Ошибка получения корзины",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cart/clear": {
            "delete": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Удаляет все товары из корзины текущего пользователя.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Корзина"
                ],
                "summary": "Очистить корзину",
                "responses": {
                    "200": {
                        "description": "Корзина успешно очищена",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Ошибка очистки корзины",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cart/item": {
            "put": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Обновляет количество, размер или другие параметры элемента в корзине.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Корзина"
                ],
                "summary": "Обновить элемент корзины",
                "parameters": [
                    {
                        "description": "Данные элемента корзины для обновления",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cart.Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Элемент корзины успешно обновлен",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Ошибка обновления элемента корзины",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Позволяет добавить новый товар в корзину пользователя.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Корзина"
                ],
                "summary": "Добавить товар в корзину",
                "parameters": [
                    {
                        "description": "Данные товара для добавления в корзину",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cart.Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Добавленный товар",
                        "schema": {
                            "$ref": "#/definitions/cart.Item"
                        }
                    },
                    "400": {
                        "description": "Ошибка ввода или бизнес-логики",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cart/item/{id}": {
            "delete": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Удаляет элемент корзины по его идентификатору.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Корзина"
                ],
                "summary": "Удалить элемент из корзины",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID элемента корзины",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Элемент успешно удален",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Ошибка удаления элемента корзины",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/catalog": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Retrieves the catalog based on the provided query parameters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalog"
                ],
                "summary": "Get catalog",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter query parameter",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort query parameter",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Catalog data",
                        "schema": {
                            "$ref": "#/definitions/search.Catalog"
                        }
                    },
                    "400": {
                        "description": "Invalid request or failed to process the response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - context creation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/client": {
            "put": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint updates an existing client's information in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Update an existing client",
                "parameters": [
                    {
                        "description": "Client information to be updated",
                        "name": "client",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/clientservice.ClientInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated client information",
                        "schema": {
                            "$ref": "#/definitions/clientservice.ClientInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/client/all": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint retrieves a list of clients from the client service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Get list of clients",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/clientservice.ClientInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/client/{id}": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Retrieves client details by their ID. Authorization is required to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Get client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client details",
                        "schema": {
                            "$ref": "#/definitions/clientservice.ClientInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid client ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Invalid token or unauthorized request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Deletes a client by their ID. Authorization is required to access this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Delete client",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted client",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid client ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Invalid token or unauthorized request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/filters/active": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Retrieves a list of active filters from the search service.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filters"
                ],
                "summary": "Get active filters",
                "responses": {
                    "200": {
                        "description": "List of active filters",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/search.Filter"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or failed to process the response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - context creation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/order": {
            "post": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Создает новый заказ, используя переданные идентификаторы элементов корзины.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Заказы"
                ],
                "summary": "Создать заказ",
                "parameters": [
                    {
                        "description": "Список идентификаторов элементов корзины",
                        "name": "cartItemIds",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Заказ успешно создан",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Ошибка при создании заказа",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/order/all": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Возвращает список всех заказов, связанных с текущим авторизованным пользователем.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Заказы"
                ],
                "summary": "Получить заказы пользователя",
                "responses": {
                    "200": {
                        "description": "Список заказов пользователя",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/order.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка при получении заказов пользователя",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/product/{productId}/catalog": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Retrieves the catalog for a specific product by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalog"
                ],
                "summary": "Get product catalog",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product catalog data",
                        "schema": {
                            "$ref": "#/definitions/search.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid request or failed to process the response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - context creation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint retrieves a list of all products from the warehouse.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get a list of products",
                "responses": {
                    "200": {
                        "description": "List of products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/warehousesevice.Product"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint allows you to update a list of products in the warehouse.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update a list of products",
                "parameters": [
                    {
                        "description": "List of products to update",
                        "name": "products",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/warehousesevice.Product"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products successfully updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint allows you to add a list of products to the warehouse.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Add products to the warehouse",
                "parameters": [
                    {
                        "description": "List of products to be added",
                        "name": "products",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/warehousesevice.Product"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products successfully added"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint allows you to delete a list of products from the warehouse by their IDs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Delete products from the warehouse",
                "parameters": [
                    {
                        "description": "List of product IDs to be deleted",
                        "name": "productIds",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products successfully deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/products/materials": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint retrieves a list of all materials from the warehouse.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "materials"
                ],
                "summary": "Get list of materials",
                "responses": {
                    "200": {
                        "description": "List of materials",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/warehousesevice.ProductMaterial"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint retrieves a product from the warehouse by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get a product by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details",
                        "schema": {
                            "$ref": "#/definitions/warehousesevice.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reports/order/{userId}/{date}": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Retrieves the order report for a specific user by their ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get order report",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Date",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order report data",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid request or failed to process the response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - context creation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reports/sell/{userId}/{date}": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Retrieves the sell report for a specific user by their ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get sell report",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Date",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sell report data",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid request or failed to process the response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - context creation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requests": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Retrieves a list of requests.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Get requests",
                "responses": {
                    "200": {
                        "description": "List of requests",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or failed to process the response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - context creation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requests/{requestId}/status/{status}": {
            "put": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "Updates the status of a specific request by its ID.",
                "tags": [
                    "Requests"
                ],
                "summary": "Update request status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Request ID",
                        "name": "requestId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New status of the request",
                        "name": "status",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status updated successfully"
                    },
                    "400": {
                        "description": "Invalid request or failed to process the response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - context creation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "put": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint allows you to update the details of an existing user in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update an existing user",
                "parameters": [
                    {
                        "description": "User information to be updated",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userservice.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user information",
                        "schema": {
                            "$ref": "#/definitions/userservice.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint allows you to add a new user to the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Add a new user",
                "parameters": [
                    {
                        "description": "User information to be added",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userservice.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully added",
                        "schema": {
                            "$ref": "#/definitions/userservice.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/all": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint retrieves a list of all users from the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get list of users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/userservice.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint retrieves the details of a user by their ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/userservice.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "LogisticAuth": []
                    }
                ],
                "description": "This endpoint allows you to delete an existing user by their ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authservice.LoginData": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Пароль пользователя для входа в систему.",
                    "type": "string"
                },
                "username": {
                    "description": "Имя пользователя для входа в систему.",
                    "type": "string"
                }
            }
        },
        "authservice.RegisterData": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Адрес клиента, связанного с пользователем.",
                    "type": "string"
                },
                "inn": {
                    "description": "ИНН клиента, связанного с пользователем.",
                    "type": "string"
                },
                "name": {
                    "description": "Имя клиента, связанного с пользователем.",
                    "type": "string"
                },
                "password": {
                    "description": "Пароль, который пользователь создаст при регистрации.",
                    "type": "string"
                },
                "role": {
                    "description": "Роль пользователя, например, администратор или обычный пользователь.",
                    "type": "string"
                },
                "username": {
                    "description": "Имя пользователя, которое будет использоваться при регистрации.",
                    "type": "string"
                }
            }
        },
        "authservice.Tokens": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "Токен доступа для авторизации запросов.",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "Токен для обновления access_token, если он истек.",
                    "type": "string"
                }
            }
        },
        "cart.Cart": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Уникальный идентификатор корзины.",
                    "type": "integer"
                },
                "items": {
                    "description": "Список товаров, добавленных в корзину.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cart.Item"
                    }
                },
                "total": {
                    "description": "Общая сумма стоимости всех товаров в корзине.",
                    "type": "integer"
                }
            }
        },
        "cart.Item": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "Цвет товара.",
                    "type": "string"
                },
                "count": {
                    "description": "Количество единиц данного товара в корзине.",
                    "type": "integer"
                },
                "id": {
                    "description": "Уникальный идентификатор элемента корзины.",
                    "type": "integer"
                },
                "isSelected": {
                    "description": "Признак, выбран ли данный товар (например, для оформления заказа).",
                    "type": "boolean"
                },
                "name": {
                    "description": "Название товара.",
                    "type": "string"
                },
                "price": {
                    "description": "Цена за единицу товара.",
                    "type": "number"
                },
                "productId": {
                    "description": "Идентификатор товара (связь с ProductItem).",
                    "type": "integer"
                },
                "size": {
                    "description": "Размер товара (например, 42, 50 и т.д.).",
                    "type": "integer"
                }
            }
        },
        "clientservice.ClientInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Адрес клиента.",
                    "type": "string"
                },
                "id": {
                    "description": "Уникальный идентификатор клиента.",
                    "type": "integer"
                },
                "inn": {
                    "description": "ИНН клиента.",
                    "type": "string"
                },
                "name": {
                    "description": "Имя клиента.",
                    "type": "string"
                }
            }
        },
        "order.Order": {
            "type": "object",
            "properties": {
                "createDate": {
                    "description": "Дата и время создания заказа",
                    "type": "string"
                },
                "deliveryWeight": {
                    "description": "Общий вес доставки для всех товаров в заказе",
                    "type": "number"
                },
                "id": {
                    "description": "Уникальный идентификатор заказа",
                    "type": "string"
                },
                "status": {
                    "description": "Текущий статус заказа (например, \"в процессе\", \"доставлен\", \"отменен\")",
                    "allOf": [
                        {
                            "$ref": "#/definitions/order.Status"
                        }
                    ]
                },
                "total": {
                    "description": "Общая сумма заказа",
                    "type": "number"
                }
            }
        },
        "order.Status": {
            "type": "string",
            "enum": [
                "unknown",
                "pending",
                "delivering",
                "delivered",
                "cancelled"
            ],
            "x-enum-varnames": [
                "Unknown",
                "Pending",
                "Delivering",
                "Delivered",
                "Cancelled"
            ]
        },
        "search.AppliedFilters": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "color": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "material": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxPrice": {
                    "type": "number"
                },
                "minPrice": {
                    "type": "number"
                },
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "search.Catalog": {
            "type": "object",
            "properties": {
                "filters": {
                    "$ref": "#/definitions/search.AppliedFilters"
                },
                "pages": {
                    "type": "integer"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/search.Product"
                    }
                },
                "searchId": {
                    "type": "string"
                }
            }
        },
        "search.Factory": {
            "type": "object",
            "properties": {
                "factoryName": {
                    "description": "Название завода.",
                    "type": "string"
                },
                "id": {
                    "description": "Уникальный идентификатор завода.",
                    "type": "integer"
                }
            }
        },
        "search.Filter": {
            "type": "object",
            "properties": {
                "allowedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "search.Product": {
            "type": "object",
            "properties": {
                "brandName": {
                    "description": "Название бренда продукта.",
                    "type": "string"
                },
                "factory": {
                    "description": "Завод, производящий продукт.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/search.Factory"
                        }
                    ]
                },
                "id": {
                    "description": "Уникальный идентификатор продукта.",
                    "type": "integer"
                },
                "images": {
                    "description": "Список изображений продукта.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/search.ProductImages"
                    }
                },
                "items": {
                    "description": "Список товаров (размер, количество на складе и т.д.).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/search.ProductItem"
                    }
                },
                "materials": {
                    "description": "Материалы, из которых состоит продукт.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/search.ProductMaterial"
                    }
                },
                "name": {
                    "description": "Название продукта.",
                    "type": "string"
                },
                "price": {
                    "description": "Цена продукта.",
                    "type": "number"
                },
                "status": {
                    "description": "Статус продукта (например, \"в наличии\", \"не в наличии\").",
                    "type": "string"
                }
            }
        },
        "search.ProductImages": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Уникальный идентификатор изображения.",
                    "type": "integer"
                },
                "imageUrl": {
                    "description": "URL изображения продукта.",
                    "type": "string"
                }
            }
        },
        "search.ProductItem": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "Цвет товара.",
                    "type": "string"
                },
                "id": {
                    "description": "Уникальный идентификатор товара.",
                    "type": "integer"
                },
                "size": {
                    "description": "Размер товара (например, 42, 50 и т.д.).",
                    "type": "integer"
                },
                "stockCount": {
                    "description": "Количество товара на складе.",
                    "type": "integer"
                },
                "weight": {
                    "description": "Вес товара.",
                    "type": "number"
                }
            }
        },
        "search.ProductMaterial": {
            "type": "object",
            "properties": {
                "Id": {
                    "description": "Уникальный идентификатор материала.",
                    "type": "integer"
                },
                "Material": {
                    "description": "Название материала (например, \"дерево\", \"металл\").",
                    "type": "string"
                }
            }
        },
        "userservice.User": {
            "type": "object",
            "properties": {
                "clientId": {
                    "description": "Идентификатор клиента, с которым связан пользователь.",
                    "type": "integer"
                },
                "id": {
                    "description": "Уникальный идентификатор пользователя.",
                    "type": "integer"
                },
                "password": {
                    "description": "Пароль пользователя для входа в систему.",
                    "type": "string"
                },
                "role": {
                    "description": "Роль пользователя (например, администратор или обычный пользователь).",
                    "type": "string"
                },
                "status": {
                    "description": "Статус пользователя (например, активен или заблокирован).",
                    "type": "integer"
                },
                "username": {
                    "description": "Имя пользователя для входа в систему.",
                    "type": "string"
                }
            }
        },
        "warehousesevice.Factory": {
            "type": "object",
            "properties": {
                "factoryName": {
                    "description": "Название завода.",
                    "type": "string"
                },
                "id": {
                    "description": "Уникальный идентификатор завода.",
                    "type": "integer"
                }
            }
        },
        "warehousesevice.Product": {
            "type": "object",
            "properties": {
                "brandName": {
                    "description": "Название бренда продукта.",
                    "type": "string"
                },
                "factory": {
                    "description": "Завод, производящий продукт.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/warehousesevice.Factory"
                        }
                    ]
                },
                "id": {
                    "description": "Уникальный идентификатор продукта.",
                    "type": "integer"
                },
                "images": {
                    "description": "Список изображений продукта.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/warehousesevice.ProductImages"
                    }
                },
                "items": {
                    "description": "Список товаров (размер, количество на складе и т.д.).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/warehousesevice.ProductItem"
                    }
                },
                "materials": {
                    "description": "Материалы, из которых состоит продукт.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/warehousesevice.ProductMaterial"
                    }
                },
                "name": {
                    "description": "Название продукта.",
                    "type": "string"
                },
                "price": {
                    "description": "Цена продукта.",
                    "type": "number"
                },
                "status": {
                    "description": "Статус продукта (например, \"в наличии\", \"не в наличии\").",
                    "type": "string"
                }
            }
        },
        "warehousesevice.ProductImages": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Уникальный идентификатор изображения.",
                    "type": "integer"
                },
                "imageUrl": {
                    "description": "URL изображения продукта.",
                    "type": "string"
                }
            }
        },
        "warehousesevice.ProductItem": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "Цвет товара.",
                    "type": "string"
                },
                "id": {
                    "description": "Уникальный идентификатор товара.",
                    "type": "integer"
                },
                "size": {
                    "description": "Размер товара (например, 42, 50 и т.д.).",
                    "type": "integer"
                },
                "stockCount": {
                    "description": "Количество товара на складе.",
                    "type": "integer"
                },
                "weight": {
                    "description": "Вес товара.",
                    "type": "number"
                }
            }
        },
        "warehousesevice.ProductMaterial": {
            "type": "object",
            "properties": {
                "Id": {
                    "description": "Уникальный идентификатор материала.",
                    "type": "integer"
                },
                "Material": {
                    "description": "Название материала (например, \"дерево\", \"металл\").",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "LogisticAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "api-gateway",
	Description:      "Прослойка для взаимодействия с логистическим сервисом",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
