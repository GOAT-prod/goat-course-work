definitions:
  authservice.LoginData:
    properties:
      password:
        description: Пароль пользователя для входа в систему.
        type: string
      username:
        description: Имя пользователя для входа в систему.
        type: string
    type: object
  authservice.RegisterData:
    properties:
      address:
        description: Адрес клиента, связанного с пользователем.
        type: string
      inn:
        description: ИНН клиента, связанного с пользователем.
        type: string
      name:
        description: Имя клиента, связанного с пользователем.
        type: string
      password:
        description: Пароль, который пользователь создаст при регистрации.
        type: string
      role:
        description: Роль пользователя, например, администратор или обычный пользователь.
        type: string
      username:
        description: Имя пользователя, которое будет использоваться при регистрации.
        type: string
    type: object
  authservice.Tokens:
    properties:
      access_token:
        description: Токен доступа для авторизации запросов.
        type: string
      refresh_token:
        description: Токен для обновления access_token, если он истек.
        type: string
    type: object
  cart.Cart:
    properties:
      id:
        description: Уникальный идентификатор корзины.
        type: integer
      items:
        description: Список товаров, добавленных в корзину.
        items:
          $ref: '#/definitions/cart.Item'
        type: array
      total:
        description: Общая сумма стоимости всех товаров в корзине.
        type: integer
    type: object
  cart.Item:
    properties:
      color:
        description: Цвет товара.
        type: string
      count:
        description: Количество единиц данного товара в корзине.
        type: integer
      id:
        description: Уникальный идентификатор элемента корзины.
        type: integer
      isSelected:
        description: Признак, выбран ли данный товар (например, для оформления заказа).
        type: boolean
      name:
        description: Название товара.
        type: string
      price:
        description: Цена за единицу товара.
        type: number
      productId:
        description: Идентификатор товара (связь с ProductItem).
        type: integer
      size:
        description: Размер товара (например, 42, 50 и т.д.).
        type: integer
    type: object
  clientservice.ClientInfo:
    properties:
      address:
        description: Адрес клиента.
        type: string
      id:
        description: Уникальный идентификатор клиента.
        type: integer
      inn:
        description: ИНН клиента.
        type: string
      name:
        description: Имя клиента.
        type: string
    type: object
  order.Order:
    properties:
      createDate:
        description: Дата и время создания заказа
        type: string
      deliveryWeight:
        description: Общий вес доставки для всех товаров в заказе
        type: number
      id:
        description: Уникальный идентификатор заказа
        type: string
      status:
        allOf:
        - $ref: '#/definitions/order.Status'
        description: Текущий статус заказа (например, "в процессе", "доставлен", "отменен")
      total:
        description: Общая сумма заказа
        type: number
    type: object
  order.Status:
    enum:
    - unknown
    - pending
    - delivering
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - Unknown
    - Pending
    - Delivering
    - Delivered
    - Cancelled
  search.AppliedFilters:
    properties:
      brand:
        items:
          type: string
        type: array
      color:
        items:
          type: string
        type: array
      limit:
        type: integer
      material:
        items:
          type: string
        type: array
      maxPrice:
        type: number
      minPrice:
        type: number
      page:
        type: integer
      size:
        items:
          type: integer
        type: array
    type: object
  search.Catalog:
    properties:
      filters:
        $ref: '#/definitions/search.AppliedFilters'
      pages:
        type: integer
      products:
        items:
          $ref: '#/definitions/search.Product'
        type: array
      searchId:
        type: string
    type: object
  search.Factory:
    properties:
      factoryName:
        description: Название завода.
        type: string
      id:
        description: Уникальный идентификатор завода.
        type: integer
    type: object
  search.Filter:
    properties:
      allowedValues:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  search.Product:
    properties:
      brandName:
        description: Название бренда продукта.
        type: string
      factory:
        allOf:
        - $ref: '#/definitions/search.Factory'
        description: Завод, производящий продукт.
      id:
        description: Уникальный идентификатор продукта.
        type: integer
      images:
        description: Список изображений продукта.
        items:
          $ref: '#/definitions/search.ProductImages'
        type: array
      items:
        description: Список товаров (размер, количество на складе и т.д.).
        items:
          $ref: '#/definitions/search.ProductItem'
        type: array
      materials:
        description: Материалы, из которых состоит продукт.
        items:
          $ref: '#/definitions/search.ProductMaterial'
        type: array
      name:
        description: Название продукта.
        type: string
      price:
        description: Цена продукта.
        type: number
      status:
        description: Статус продукта (например, "в наличии", "не в наличии").
        type: string
    type: object
  search.ProductImages:
    properties:
      id:
        description: Уникальный идентификатор изображения.
        type: integer
      imageUrl:
        description: URL изображения продукта.
        type: string
    type: object
  search.ProductItem:
    properties:
      color:
        description: Цвет товара.
        type: string
      id:
        description: Уникальный идентификатор товара.
        type: integer
      size:
        description: Размер товара (например, 42, 50 и т.д.).
        type: integer
      stockCount:
        description: Количество товара на складе.
        type: integer
      weight:
        description: Вес товара.
        type: number
    type: object
  search.ProductMaterial:
    properties:
      Id:
        description: Уникальный идентификатор материала.
        type: integer
      Material:
        description: Название материала (например, "дерево", "металл").
        type: string
    type: object
  userservice.User:
    properties:
      clientId:
        description: Идентификатор клиента, с которым связан пользователь.
        type: integer
      id:
        description: Уникальный идентификатор пользователя.
        type: integer
      password:
        description: Пароль пользователя для входа в систему.
        type: string
      role:
        description: Роль пользователя (например, администратор или обычный пользователь).
        type: string
      status:
        description: Статус пользователя (например, активен или заблокирован).
        type: integer
      username:
        description: Имя пользователя для входа в систему.
        type: string
    type: object
  warehousesevice.Factory:
    properties:
      factoryName:
        description: Название завода.
        type: string
      id:
        description: Уникальный идентификатор завода.
        type: integer
    type: object
  warehousesevice.Product:
    properties:
      brandName:
        description: Название бренда продукта.
        type: string
      factory:
        allOf:
        - $ref: '#/definitions/warehousesevice.Factory'
        description: Завод, производящий продукт.
      id:
        description: Уникальный идентификатор продукта.
        type: integer
      images:
        description: Список изображений продукта.
        items:
          $ref: '#/definitions/warehousesevice.ProductImages'
        type: array
      items:
        description: Список товаров (размер, количество на складе и т.д.).
        items:
          $ref: '#/definitions/warehousesevice.ProductItem'
        type: array
      materials:
        description: Материалы, из которых состоит продукт.
        items:
          $ref: '#/definitions/warehousesevice.ProductMaterial'
        type: array
      name:
        description: Название продукта.
        type: string
      price:
        description: Цена продукта.
        type: number
      status:
        description: Статус продукта (например, "в наличии", "не в наличии").
        type: string
    type: object
  warehousesevice.ProductImages:
    properties:
      id:
        description: Уникальный идентификатор изображения.
        type: integer
      imageUrl:
        description: URL изображения продукта.
        type: string
    type: object
  warehousesevice.ProductItem:
    properties:
      color:
        description: Цвет товара.
        type: string
      id:
        description: Уникальный идентификатор товара.
        type: integer
      size:
        description: Размер товара (например, 42, 50 и т.д.).
        type: integer
      stockCount:
        description: Количество товара на складе.
        type: integer
      weight:
        description: Вес товара.
        type: number
    type: object
  warehousesevice.ProductMaterial:
    properties:
      Id:
        description: Уникальный идентификатор материала.
        type: integer
      Material:
        description: Название материала (например, "дерево", "металл").
        type: string
    type: object
info:
  contact: {}
  description: Прослойка для взаимодействия с логистическим сервисом
  title: api-gateway
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns access and refresh tokens.
      parameters:
      - description: User login credentials
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/authservice.LoginData'
      produces:
      - application/json
      responses:
        "200":
          description: Access and refresh tokens
          schema:
            $ref: '#/definitions/authservice.Tokens'
        "403":
          description: Forbidden - Invalid credentials or request
          schema:
            type: string
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidates the user's session by revoking the refresh token.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            type: string
        "403":
          description: Forbidden - Invalid token or request
          schema:
            type: string
      summary: User logout
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user and returns access and refresh tokens.
      parameters:
      - description: User registration data
        in: body
        name: registerData
        required: true
        schema:
          $ref: '#/definitions/authservice.RegisterData'
      produces:
      - application/json
      responses:
        "200":
          description: Access and refresh tokens
          schema:
            $ref: '#/definitions/authservice.Tokens'
        "403":
          description: Forbidden - Invalid registration data or request
          schema:
            type: string
      summary: User registration
      tags:
      - auth
  /cart:
    get:
      description: Возвращает содержимое корзины текущего пользователя.
      produces:
      - application/json
      responses:
        "200":
          description: Содержимое корзины пользователя
          schema:
            $ref: '#/definitions/cart.Cart'
        "400":
          description: Ошибка получения корзины
          schema:
            type: string
        "403":
          description: Доступ запрещен
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Получить корзину пользователя
      tags:
      - Корзина
  /cart/clear:
    delete:
      description: Удаляет все товары из корзины текущего пользователя.
      produces:
      - application/json
      responses:
        "200":
          description: Корзина успешно очищена
          schema:
            type: string
        "400":
          description: Ошибка очистки корзины
          schema:
            type: string
        "403":
          description: Доступ запрещен
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Очистить корзину
      tags:
      - Корзина
  /cart/item:
    post:
      consumes:
      - application/json
      description: Позволяет добавить новый товар в корзину пользователя.
      parameters:
      - description: Данные товара для добавления в корзину
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/cart.Item'
      produces:
      - application/json
      responses:
        "200":
          description: Добавленный товар
          schema:
            $ref: '#/definitions/cart.Item'
        "400":
          description: Ошибка ввода или бизнес-логики
          schema:
            type: string
        "403":
          description: Доступ запрещен
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Добавить товар в корзину
      tags:
      - Корзина
    put:
      consumes:
      - application/json
      description: Обновляет количество, размер или другие параметры элемента в корзине.
      parameters:
      - description: Данные элемента корзины для обновления
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/cart.Item'
      produces:
      - application/json
      responses:
        "200":
          description: Элемент корзины успешно обновлен
          schema:
            type: string
        "400":
          description: Ошибка обновления элемента корзины
          schema:
            type: string
        "403":
          description: Доступ запрещен
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Обновить элемент корзины
      tags:
      - Корзина
  /cart/item/{id}:
    delete:
      description: Удаляет элемент корзины по его идентификатору.
      parameters:
      - description: ID элемента корзины
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Элемент успешно удален
          schema:
            type: string
        "400":
          description: Ошибка удаления элемента корзины
          schema:
            type: string
        "403":
          description: Доступ запрещен
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Удалить элемент из корзины
      tags:
      - Корзина
  /catalog:
    get:
      description: Retrieves the catalog based on the provided query parameters.
      parameters:
      - description: Filter query parameter
        in: query
        name: filter
        type: string
      - description: Sort query parameter
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Catalog data
          schema:
            $ref: '#/definitions/search.Catalog'
        "400":
          description: Invalid request or failed to process the response
          schema:
            type: string
        "403":
          description: Forbidden - context creation failed
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get catalog
      tags:
      - Catalog
  /client:
    put:
      consumes:
      - application/json
      description: This endpoint updates an existing client's information in the system.
      parameters:
      - description: Client information to be updated
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/clientservice.ClientInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Updated client information
          schema:
            $ref: '#/definitions/clientservice.ClientInfo'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Update an existing client
      tags:
      - clients
  /client/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a client by their ID. Authorization is required to access
        this endpoint.
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted client
          schema:
            type: string
        "400":
          description: Bad Request - Invalid client ID
          schema:
            type: string
        "403":
          description: Forbidden - Invalid token or unauthorized request
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Delete client
      tags:
      - clients
    get:
      consumes:
      - application/json
      description: Retrieves client details by their ID. Authorization is required
        to access this endpoint.
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Client details
          schema:
            $ref: '#/definitions/clientservice.ClientInfo'
        "400":
          description: Bad Request - Invalid client ID
          schema:
            type: string
        "403":
          description: Forbidden - Invalid token or unauthorized request
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get client
      tags:
      - clients
  /client/all:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves a list of clients from the client service.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/clientservice.ClientInfo'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get list of clients
      tags:
      - clients
  /filters/active:
    get:
      description: Retrieves a list of active filters from the search service.
      produces:
      - application/json
      responses:
        "200":
          description: List of active filters
          schema:
            items:
              $ref: '#/definitions/search.Filter'
            type: array
        "400":
          description: Invalid request or failed to process the response
          schema:
            type: string
        "403":
          description: Forbidden - context creation failed
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get active filters
      tags:
      - Filters
  /order:
    post:
      consumes:
      - application/json
      description: Создает новый заказ, используя переданные идентификаторы элементов
        корзины.
      parameters:
      - description: Список идентификаторов элементов корзины
        in: body
        name: cartItemIds
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Заказ успешно создан
          schema:
            type: string
        "400":
          description: Ошибка при создании заказа
          schema:
            type: string
        "403":
          description: Доступ запрещен
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Создать заказ
      tags:
      - Заказы
  /order/all:
    get:
      consumes:
      - application/json
      description: Возвращает список всех заказов, связанных с текущим авторизованным
        пользователем.
      produces:
      - application/json
      responses:
        "200":
          description: Список заказов пользователя
          schema:
            items:
              $ref: '#/definitions/order.Order'
            type: array
        "400":
          description: Ошибка при получении заказов пользователя
          schema:
            type: string
        "403":
          description: Доступ запрещен
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Получить заказы пользователя
      tags:
      - Заказы
  /product/{productId}/catalog:
    get:
      description: Retrieves the catalog for a specific product by its ID.
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product catalog data
          schema:
            $ref: '#/definitions/search.Product'
        "400":
          description: Invalid request or failed to process the response
          schema:
            type: string
        "403":
          description: Forbidden - context creation failed
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get product catalog
      tags:
      - Catalog
  /products:
    delete:
      consumes:
      - application/json
      description: This endpoint allows you to delete a list of products from the
        warehouse by their IDs.
      parameters:
      - description: List of product IDs to be deleted
        in: body
        name: productIds
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Products successfully deleted
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Delete products from the warehouse
      tags:
      - products
    get:
      consumes:
      - application/json
      description: This endpoint retrieves a list of all products from the warehouse.
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            items:
              $ref: '#/definitions/warehousesevice.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get a list of products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: This endpoint allows you to add a list of products to the warehouse.
      parameters:
      - description: List of products to be added
        in: body
        name: products
        required: true
        schema:
          items:
            $ref: '#/definitions/warehousesevice.Product'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Products successfully added
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Add products to the warehouse
      tags:
      - products
    put:
      consumes:
      - application/json
      description: This endpoint allows you to update a list of products in the warehouse.
      parameters:
      - description: List of products to update
        in: body
        name: products
        required: true
        schema:
          items:
            $ref: '#/definitions/warehousesevice.Product'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Products successfully updated
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Update a list of products
      tags:
      - products
  /products/{id}:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves a product from the warehouse by its ID.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            $ref: '#/definitions/warehousesevice.Product'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get a product by ID
      tags:
      - products
  /products/materials:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves a list of all materials from the warehouse.
      produces:
      - application/json
      responses:
        "200":
          description: List of materials
          schema:
            items:
              $ref: '#/definitions/warehousesevice.ProductMaterial'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get list of materials
      tags:
      - materials
  /reports/order/{userId}/{date}:
    get:
      description: Retrieves the order report for a specific user by their ID.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Date
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order report data
          schema:
            type: object
        "400":
          description: Invalid request or failed to process the response
          schema:
            type: string
        "403":
          description: Forbidden - context creation failed
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get order report
      tags:
      - Reports
  /reports/sell/{userId}/{date}:
    get:
      description: Retrieves the sell report for a specific user by their ID.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Date
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sell report data
          schema:
            type: object
        "400":
          description: Invalid request or failed to process the response
          schema:
            type: string
        "403":
          description: Forbidden - context creation failed
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get sell report
      tags:
      - Reports
  /requests:
    get:
      description: Retrieves a list of requests.
      produces:
      - application/json
      responses:
        "200":
          description: List of requests
          schema:
            items:
              type: object
            type: array
        "400":
          description: Invalid request or failed to process the response
          schema:
            type: string
        "403":
          description: Forbidden - context creation failed
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get requests
      tags:
      - Requests
  /requests/{requestId}/status/{status}:
    put:
      description: Updates the status of a specific request by its ID.
      parameters:
      - description: Request ID
        in: path
        name: requestId
        required: true
        type: integer
      - description: New status of the request
        in: path
        name: status
        required: true
        type: string
      responses:
        "204":
          description: Status updated successfully
        "400":
          description: Invalid request or failed to process the response
          schema:
            type: string
        "403":
          description: Forbidden - context creation failed
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Update request status
      tags:
      - Requests
  /user:
    post:
      consumes:
      - application/json
      description: This endpoint allows you to add a new user to the system.
      parameters:
      - description: User information to be added
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userservice.User'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully added
          schema:
            $ref: '#/definitions/userservice.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Add a new user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: This endpoint allows you to update the details of an existing user
        in the system.
      parameters:
      - description: User information to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/userservice.User'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user information
          schema:
            $ref: '#/definitions/userservice.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Update an existing user
      tags:
      - users
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint allows you to delete an existing user by their ID.
      parameters:
      - description: User ID to be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the details of a user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/userservice.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get a user by ID
      tags:
      - users
  /user/all:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves a list of all users from the system.
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/userservice.User'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - LogisticAuth: []
      summary: Get list of users
      tags:
      - users
securityDefinitions:
  LogisticAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
